jkjh
jkjh
a = 2
b
a
getwd
getwd()
mydata = read.csv("musicas.csv")
getwd()
dir.create("testando")
ls()
dir
list.files(.)
list.files(".")
dir.create("data")
list.files(".")
fileUrl = "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, "./data/teste.csv")
download.file(fileUrl, destfile= "./data/teste.csv")
download.file(fileUrl, destfile= "./data/teste.csv", method = "curl")
list.files("./data")
cameraData = read.table("./data/teste.csv")
cameraData = read.table("./data/teste.csv")
cameraData = read.table("./data/teste.csv", sep=",")
head(cameraData)
cameraData = read.table("./data/teste.csv", sep=",", header = TRUE)
head(cameraData)
cameraData = read.csv("./data/teste.csv")
head(cameraData)
library(XML)
install.packages("XML")
library(XML)
fileUrl = "http://www.w3schools.com.br/xml/simple.xml"
doc = xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl = "http://www.w3schools.com/xml/simple.xml"
doc = xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode = xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[1]
rootNode[[1]]
rootNode[[2]]
rootNode[[0]]
rootNode[[2]][[1]]
xPathSApply(rootNode, "//name")
xpathSApply(rootNode, "//name")
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//name", xmlValue)[[1]]
xpathSApply(rootNode, "//name", xmlValue)[[2]]
xpathSApply(rootNode, "//name", xmlValue)[[2:3]]
xpathSApply(rootNode, "//name", xmlValue)[[2]]
xpathSApply(rootNode, "//name", xmlAttrs)[[2]]
xpathSApply(rootNode, "//name", xmlAttrs)[[2]]
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
jsondata = fromJSON("https://api.github.com/users/gtleek/repos")
jsondata = fromJSON("https://api.github.com/users/gtleek/repos")
install.packages('httr')
jsondata = fromJSON("https://api.github.com/users/gtleek/repos")
jsondata = fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsondata)
jsondata
jsondata$open_issues
myjson = toJSON(iris, pretty=TRUE)
cat(myjson)
iris2 = fromJSON(myjson)
iris2
install.packages('RMySQL')
ucscDb = dbConnect(MySQL(), user="genome", host="genome-mysql.cse.edu")
library('RMySWL')
library('RMySQL')
ucscDb = dbConnect(MySQL(), user="genome", host="genome-mysql.cse.edu")
ucscDb = dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result = dbGetQuery(ucscDb, "show databases;");
result
dbDisconnect(ucscDb)
result
head(result)
T
F
TRUE
1
library(httr)
oauth_endpoints("github")
myapp = oauth_app("github", "780d804a0f36e22c65ea")
myapp
?oauth_app
myapp = oauth_app("github", "780d804a0f36e22c65ea", "495a0cccf6ed6fa108bdb91dd94c3222276fbe21")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
gtoken
https://api.github.com/users/jtleek/repos
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req
myapp = oauth_app("github", "780d804a0f36e22c65ea")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
j
myapp <- oauth_app("github", "780d804a0f36e22c65ea", "495a0cccf6ed6fa108bdb91dd94c3222276fbe21")
install.packages("httpuv")
install.packages("httpuv")
library("httpuv")
myapp = oauth_app("Testing API", key="780d804a0f36e22c65ea", secret="495a0cccf6ed6fa108bdb91dd94c3222276fbe21")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
library(sqldf)
install.packages(sqldf)
install.packages("sqldf")
library(sqldf)
library(sqldf)
read.csv()
read.csv(file="/Users/marcelo/Downloads/getdata-data-ss06pid.csv")
data = read.csv(file="/Users/marcelo/Downloads/getdata-data-ss06pid.csv")
head(data)
acs
acs = data
acs
sqldf("select pwgtp1 from acs where AGEP < 50")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
con
?readLines
htmlCode = readLines(con)
close(con)
htmlCode
con = url("http://biostat.jhsph
l
';lk'
.
()
)
kjlhk
"
"
)
""
htmlCode
htmlCode[100]
htmlCode[1]
htmlCode[0]
nchar(htmlCode[1])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=, header = FALSE, skips=4)
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=2, header = FALSE, skips=4)
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=2, header=FALSE, skips=4)
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=2, header=FALSE, skip=4)
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(9), header=FALSE, skip=4)
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(10), header=FALSE, skip=4)
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(10, 5), header=FALSE, skip=4)
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(10, 6, 5), header=FALSE, skip=4)
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(10, 5, 5), header=FALSE, skip=4)
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(10, 5, 4), header=FALSE, skip=4)
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(10, 5, 4, 4), header=FALSE, skip=4)
read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(10, 5, 4, 4), header=FALSE)
data = read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(10, 5, 4, 4), header=FALSE)
head(data)
data = read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(10, 5, 4, 4), header=FALSE, skip=4)
head(data)
data = read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(10, 5, 4, 4, 5, 4, 4), header=FALSE, skip=4)
head(data)
data = read.fwf("/Users/marcelo/Downloads/getdata-wksst8110.for", widths=c(10, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4), header=FALSE, skip=4)
head(data)
head(data$V13)
sum(data$V13)
sum(data$V4)
sum(data$V6)
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="/Users/marcelo/Download/uscomm.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="uscomm.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="./data/uscomm.csv", , method="curl")
read.csv
read.csv("./data/uscomm.csv")
uscomm = read.csv("./data/uscomm.csv")
head(uscomm)
uscomm[(uscomm$ACR), ]
uscomm[(uscomm$ACR = 3), ]
uscomm[(uscomm$ACR = 3 & uscomm$AGS = 6), ]
uscomm[(uscomm$ACR = 3 & uscomm$AGS = 6), ]
uscomm[(uscomm$ACR == 3 & uscomm$AGS == 6), ]
uscomm[(uscomm$ACR == 3)]
is.numerical(uscomm$ACR)
is.numeric(uscomm$ACR)
is.numeric(uscomm$ACS)
is.numeric(uscomm$AGS)
uscomm[(uscomm$ACR = 3 & uscomm$AGS = 6), ]
x = uscomm[(uscomm$ACR = 3 & uscomm$AGS = 6), ]
x = uscomm[(uscomm$ACR = 3) & (uscomm$AGS = 6), ]
x
x$ACR
x$AGR
x$AGS
cls
cls()
clear()
x$AGS
x$AGS
x = uscomm[(uscomm$ACR >= 3 & uscomm$AGS >= 6), ]
x
x$AGS
uscomm$agricultureLogical = ifelse((uscomm$ACR >= 3 & uscomm$AGS >= 6), TRUE, FALSE)
uscomm$agricultureLogical
head(uscomm$agricultureLogical)
head(uscomm$agricultureLogical, 100)
tail(uscomm$agricultureLogical, 100)
uscomm$agricultureLogical = ifelse((uscomm$ACR >= 3 & uscomm$AGS >= 6), TRUE, FALSE)
which(agricultureLogical)
uscomm$agricultureLogical
agricultureLogical = ifelse((uscomm$ACR >= 3 & uscomm$AGS >= 6), TRUE, FALSE)
agricultureLogical
which(agricultureLogical)
which(agricultureLogical = FALSE)
which(agricultureLogical == FALSE)
agricultureLogical = ifelse(uscomm$ACR >= 3 & uscomm$AGS >= 6, TRUE, FALSE)
agricultureLogical
agricultureLogical = ifelse(uscomm$ACR >= 3, TRUE, FALSE)
agricultureLogical
x = uscomm[(uscomm$ACR >= 3 & uscomm$AGS >= 6), ]
x
uscomm = read.csv("./data/uscomm.csv")
agricultureLogical = ifelse(uscomm$ACR >= 3 & uscomm$AGS >= 6, TRUE, FALSE)
agricultureLogical
which(agricultureLogical)
library(jpeg)
install.package(jpeg)
install.packages(jpeg)
install.packages("jpeg")
library(jpeg)
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = FALSE)
readJPEG("./data/getdata%2Fjeff.jpg", native = FALSE)
readJPEG("./data/getdata-jeff.jpg", native = TRUE)
x = readJPEG("./data/getdata-jeff.jpg", native = TRUE)
quantile(x)
quantile(x, 5)
quantile(x, 0.3)
quantile(x, c(0.3,0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="./data/gdp.csv", , method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="./data/edu.csv" , method="curl")
gpd = read.csv("gdp.csv")
gpd = read.csv("./data/gdp.csv")
edu = read.csv("./data/edu.csv")
gdp = read.csv("./data/gdp.csv")
head(gdp)
head(edu)
names(gdp)
names(edu)
gdp[1:10, "X"]
mergedData = merge(gdp, edu, by.x="X", by.y="CountryCode", all=TRUE)
head(mergedData)
head(mergedData, 100)
gdp$X
EDU$CountryCode
edu$CountryCode
mergedData = merge(gdp, edu, by.x="X", by.y="CountryCode", all=TRUE)
tail(mergedData, 100)
edu
names(edu)
table(mergedData$X, mergedData$CountryCode)
xtabs(mergedData ~ X + CountryCode, data=DF)
xtabs(Freq ~ X + CountryCode, data=mergedData)
mergedData
mergedData$OECD
names(mergedData)
names(mergedData$'IncomeGroup')
mergedData$'IncomeGroup'
mergedData$"Income.Group"
library(dplyr)
library(dplyr)
install.packages('dplyr')
library(dplyr)
mergedData$X
mergedData$X > 'A'
mergedData$X
sort(mergedData$X)
sort(mergedData$X, desc)
sort(mergedData$X, desc=TRUE)
sort(mergedData$X, desc=FALSE
)
mergedData = merge(gdp, edu, by.x="X", by.y="CountryCode")
sort(mergedData$X, desc=FALSE)
sort(mergedData$CountryCode, desc=FALSE)
sort(mergedData$CountryCode)
mergedData$CountryCode)
mergedData$CountryCode
mergedData$X
len(mergedData$X)
size(mergedData$X)
length(mergedData$X)
mergedData = merge(gdp, edu, by.x="X", by.y="CountryCode", all.x=TRUE)
length(mergedData$X)
mergedData[is.na(mergedData$X),]
length(mergedData[!is.na(mergedData$X),])
mergedData = merge(gdp, edu, by.x="X", by.y="CountryCode")
mergedData$X
gdp = read.csv("./data/gdp.csv")
edu = read.csv("./data/edu.csv")
mergedData = merge(gdp, edu, by.x="X", by.y="CountryCode")
mergedData$X
mergedData = merge(gdp, edu, by.x="X", by.y="CountryCode", all=TRUE)
mergedData$X
mergedData = merge(gdp, edu, by.x="X", by.y="CountryCode")
sort(mergedData$X, decreasing=TRUE)
gdp
gdp$x3
gdp$X3
gdp$"X.3"
sort(mergedData$"X.3", decreasing=TRUE)
sort(mergedData$"X.3", decreasing=TRUE)
library(plyr)
arrange(mergedData,desc("X.3"))
arrange(mergedData,desc(X.3))
sort(mergedData$X, decreasing=TRUE)
m1 = arrange(mergedData,desc("X.3"))
m1 = arrange(mergedData,desc(X.3))
head(m1)
head(m1$X)
m1 = arrange(mergedData,desc(X.3))
m1
m1$X
m1$"X3"
m1$"X.3"
test
test
m1$"X.3"
m1 = arrange(mergedData,desc(X.3))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", desfile="test.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="test.csv", method="curl")
getwd()
dataset = read.csv("test.csv")
x = strsplit(names(dataset))
x = strsplit(names(dataset), split="wgtp")
x
x[123]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="gdp.csv", method="curl")
dataset = read.csv("gdp.csv")
View(dataset)
dataset$X.3
x = sub(",", "", dataset$X.3)
x
dataset = read.csv("gdp.csv", skip=5)
View(dataset)
dataset = read.csv("gdp.csv", skip=5, head=FALSE)
View(dataset)
dataset$V3
View(dataset)
dataset$V5
x = sub(",", "", dataset$V5)
x = sub(",", "", dataset$V5)
x
x = sub(",*", "", dataset$V5)
x
x = gsub(",", "", dataset$V5)
x
x[is.na(x)]
y = as.numeric(x)
y
mean(y, na.rm = TRUE)
mean(y)
average(y)
dataset = read.csv("gdp.csv", skip=5, nrows=190, head=FALSE)
dataset$V5
View(dataset)
View(dataset)
x = gsub(",", "", dataset$V5)
y = as.numeric(x)
head(y)
mean(y)
View(dataset)
countryNames = dataset$V4
head(countryNames)
count(grep("^United",countryNames))
grep("^United",countryNames)
x = grep("^United",countryNames)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
dates = grep("^2012", amzn$row.names)
View(uscomm)
sampleTimes = index(amzn)
sampleTimes
grep("^2012", sampleTimes)
nrow(grep("^2012", sampleTimes))
ncol(grep("^2012", sampleTimes))
length(grep("^2012", sampleTimes))
dates = as.Date(sampleTimes)
dates
format(dates, "%a-%Y")
datasForm = format(dates, "%a-%Y")
datasForm
length(grep("Seg-2012", sampleTimes))
length(grep("Seg-2012", datasForm))
length(x)
x = grep("^United",countryNames)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
xyplot(Ozone ~ Wind, data = airquality)
library(lattice)
library(dataset)
xyplot(Ozone ~ Wind, data = airquality)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
Diet
BodyWeight
str(BodyWeight)
mtcars
plot(mtcars$wt, mtcars$mpg)
qplot(mtcars$wt, mtcars$mpg)
library(ggplot2)
qplot(mtcars$wt, mtcars$mpg)
plot(mtcars$wt, mtcars$mpg, type="l")
pressure
plot(pressure$pressure, pressure$temperature)
plot(pressure$temperature, pressure$pressure)
plot(pressure$temperature, pressure$pressure, type="line")
plot(pressure$temperature, pressure$pressure, type="l")
plot(pressure$temperature, pressure$pressure, type="l")
plot(pressure$temperature, pressure$pressure, type="l")
points(pressure$temperature, pressure$pressure)
qplot(temperature, pressure, data=pressure)
qplot(temperature, pressure, data=pressure, geom="line")
qplot(temperature, pressure, data=pressure, geom=c("line", "points"))
qplot(temperature, pressure, data=pressure, geom=c("line", "point"))
library(jsonlite)
install.packages(jsonlite)
install.packages("jsonlite")
library(rjson)
install.packages("rjson")
setwd("/Users/marcelo/Documents/Ambiente/Projetos/Python/DadosMusicaisScraper/base_adb1.json")
setwd("/Users/marcelo/Documents/Ambiente/Projetos/Python/DadosMusicaisScraper")
getwd()
fromJSON(file="base_adb1.json")
library(rjson)
fromJSON(file="base_adb1.json")
teste = fromJSON(file="base_adb1.json")
