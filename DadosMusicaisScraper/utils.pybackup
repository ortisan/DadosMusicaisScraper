# -*- coding: utf-8 -*-
__author__ = 'marcelo'

import re

from music21 import harmony
from music21 import interval



# >>> symbols = ['', 'm', '+', 'dim', '7',
# ...            'M7', 'm7', 'dim7', '7+', 'm7b5', #half-diminished
# ...            'mM7', '6', 'm6', '9', 'Maj9', 'm9',
# ...            '11', 'Maj11', 'm11', '13',
# ...            'Maj13', 'm13', 'sus2', 'sus4',
# ...            'N6', 'It+6', 'Fr+6', 'Gr+6', 'pedal',
# ...            'power', 'tristan', '/E', 'm7/E-', 'add2',
# ...            '7omit3',]
# >>> for s in symbols:
# ...     chordSymbolName = 'C' + s
# ...     h = harmony.ChordSymbol(chordSymbolName)
# ...     pitchNames = [str(p) for p in h.pitches]
# ...     print("%-10s%s" % (chordSymbolName, "[" + (', '.join(pitchNames)) + "]"))
# C         [C3, E3, G3]
# Cm        [C3, E-3, G3]
# C+        [C3, E3, G#3]
# Cdim      [C3, E-3, G-3]
# C7        [C3, E3, G3, B-3]
# CM7       [C3, E3, G3, B3]
# Cm7       [C3, E-3, G3, B-3]
# Cdim7     [C3, E-3, G-3, B--3]
# C7+       [C3, E3, G#3, B-3]
# Cm7b5     [C3, E-3, G-3, B-3]
# CmM7      [C3, E-3, G3, B3]
# C6        [C3, E3, G3, A3]
# Cm6       [C3, E-3, G3, A3]
# C9        [C3, E3, G3, B-3, D4]
# CMaj9     [C3, E3, G3, B3, D4]
# Cm9       [C3, E-3, G3, B-3, D4]
# C11       [C2, E2, G2, B-2, D3, F3]
# CMaj11    [C2, E2, G2, B2, D3, F3]
# Cm11      [C2, E-2, G2, B-2, D3, F3]
# C13       [C2, E2, G2, B-2, D3, F3, A3]
# CMaj13    [C2, E2, G2, B2, D3, F3, A3]
# Cm13      [C2, E-2, G2, B-2, D3, F3, A3]
# Csus2     [C3, D3, G3]
# Csus4     [C3, F3, G3]
# CN6       [C3, D-3, E3, G-3]
# CIt+6     [C3, F#3, A-3]
# CFr+6     [C3, D3, F#3, A-3]
# CGr+6     [C3, E-3, F#3, A-3]
# Cpedal    [C3]
# Cpower    [C3, G3]
# Ctristan  [C3, D#3, F#3, A#3]
# C/E       [E3, G3, C4]
# Cm7/E-    [E-3, G3, B-3, C4]
# Cadd2     [C3, D3, E3, G3]
# C7omit3   [C3, G3, B-3]


"A a G, com #, 4, M7 e 7 SEM SER 7M"
regex_nota = u'([A-G]#*4*(M7)*(7(?!M))*)'
"b"
regex_bemol = u'(?P<bemol>b+)*'
"m"
regex_menor = u'(m)*'
"7M ou 7+ vai ser traduzido para M7"
regex_maior7 = u'(?P<maior7>7M|7\+)*'
"7m ou 7+ vai ser traduzido para M7"
regex_menor7 = u'(?P<menor7>7m|m7)*'
regex_menor7 = u'(?P<quintas>7m|m7)*'
regex_dom7 = u'(7)*'
regex_dim = u'(?P<dim>°|º|7\-)*'
# NAO USAREMOS OS ACORDES COM AS VARIACOES (9), (9/13), (13) etc
# TODO VERIFICAR SE O 5 NAO SIGNIFICA UM POWER CHORD
regex_nao_usados = u'(?P<nao_usados>(5\-|5\+|5|6)*b*(\/.*)*(\/[0-9])*(\(.+\))*)'

import logging

LOG_FILENAME = 'utils.log'
logging.basicConfig(filename=LOG_FILENAME,
                    level=logging.ERROR)


def eh_vazio(valor):
    retorno = False
    if valor is None or valor == '':
        retorno = True
    return retorno


def obter_valor_default(valor, valor_default):
    """
    Caso o valor seja None ou '', retornamos o valor_default
    :param valor: Valor que será avaliado
    :param valor_default: Valor default.
    :return: Valor caso seja != None e != '', senão valor_default.
    """
    retorno = valor
    if eh_vazio(valor):
        retorno = valor_default
    return retorno


dict_troca_notacao = {'bemol': '-',
                      'aug': 'sus4',
                      'maior7': 'M7',
                      'menor7': 'm7',
                      'dim': 'dim',
                      'nao_usados': ''}


def trocar_notacao_acordes(acorde):
    regex_compilado = re.compile(regex_nota +
                                 regex_bemol +
                                 regex_menor +
                                 regex_maior7 +
                                 regex_menor7 +
                                 regex_dom7 +
                                 regex_dim +
                                 regex_nao_usados)

    m = regex_compilado.match(acorde)

    dict_group = m.groupdict()
    if dict_group is not None:
        for chave, valor in dict_group.iteritems():
            if not eh_vazio(valor):
                novo_valor = dict_troca_notacao.get(chave)
                acorde = acorde.replace(valor, novo_valor)
    return acorde


def obter_novos_unicos_tonicas_baixos_modos(acordes, capo=0):
    novos_acordes = []
    tonicas = []
    baixos = []
    modos = []
    unicos = []

    for acorde in acordes:
        try:
            logging.info(u"Alterando o acorde <%s>, caso nao esteja previsto..." % acorde)
            novo_acorde = trocar_notacao_acordes(acorde)
            logging.info(u"Acorde alterado. De <%s> para <%s>..." % (acorde, novo_acorde))
            acorde = novo_acorde
            logging.info(u"Traduzindo acorde <%s> no music21..." % acorde)

            obj_acorde = harmony.ChordSymbol(acorde)

            if capo > 0:
                try:
                    # novas_notas = []
                    # for nota_str in notas:
                    # nota_obj = Note(nota_str)
                    # nova_nota_int = int(nota_obj) + capo
                    # nota_obj.from_int(nova_nota_int)
                    # novas_notas.append(nota_obj.name)
                    # notas = novas_notas
                    # novo_acorde = harmony.ChordSymbol(acorde)
                    aInterval = interval.Interval(capo)
                    obj_acorde.transpose(aInterval, inPlace=True)
                except BaseException as exc:
                    logging.error(u"Erro ao transpor a nota no music21. Detalhes: %s..." % exc)
                    raise exc

            # acorde_traduzido = chords.determine(notas, True, True)[0]
            acorde_traduzido, modo = harmony.chordSymbolFigureFromChord(obj_acorde, True)

            if not acorde_traduzido in unicos:
                unicos.append(acorde_traduzido)
                modos.append(modo)
                tonicas.append(obj_acorde.root().name)
                # baixos.append(obj_acorde.bass().name)
        except BaseException as exc:
            logging.error(u"Erro ao traduzir o acorde: <%s>. Detalhes: %s" % (acorde, exc))
            raise exc

            # if capo > 0:
    return novos_acordes, unicos, tonicas, modos


if __name__ == '__main__':
    # # TODO CRIAR TESTE UNITARIO
    #
    # regex_nota = u'([A-G]#*4*(M7)*(7(?!M))*)'
    # regex_bemol = u'(?P<bemol>b+)*'
    #
    # #TODO D6 EH TRADUZIDO ERRADO
    # acordes = ['Am6',u'G(add9)', u'D6', u'Em9', "Em9",
    # "A7(11+)",
    # "Am(11+)",
    # "Am7",
    # "Am6",
    # "Em6",
    # "A7(11+)",
    # "Am(11+)",
    # "D7/9b",
    # "D7/9",
    # "D5",
    # "C5",
    # "Bm",
    # "Am",
    # "C5",
    # "Bm"]
    #
    # novos_acordes, unicos, tonicas, modos = obter_novos_unicos_tonicas_baixos_modos(acordes, 0)
    # assert tonicas[0] == 'G'
    # assert tonicas[1] == 'D'
    # assert tonicas[2] == 'E'
    # assert tonicas[3] == 'A'
    # assert tonicas[4] == 'A'
    # assert tonicas[5] == 'A'
    # assert tonicas[6] == 'A'
    # assert tonicas[7] == 'E'
    #
    #
    # # regex_nota = u'([A-G]#*4*(M7)*(m7)*(7(?:!M))*)'
    # # m = re.match(regex_nota, "A7m")
    # # m.group(0)
    # # harmony.ChordSymbol('Am7')
    # #
    # # novo_acorde = harmony.ChordSymbol('A7m')
    # # [str(p) for p in novo_acorde.pitches]
    # # novo_acorde = harmony.ChordSymbol('Asus')
    # # [str(p) for p in novo_acorde.pitches]
    # # novo_acorde = harmony.ChordSymbol('Asus4')
    # # [str(p) for p in novo_acorde.pitches]
    # # novo_acorde = harmony.ChordSymbol('AM7')
    # # [str(p) for p in novo_acorde.pitches]
    # #
    # # novo_acorde = harmony.ChordSymbol('A-m')
    # # [str(p) for p in novo_acorde.pitches]
    # #
    # # aInterval = interval.Interval(2)
    # # b = novo_acorde.transpose(aInterval, inPlace=True)
    # #
    # # print b
    # #
    # # novo_acorde = harmony.ChordSymbol('C#7')
    # # [str(p) for p in novo_acorde.pitches]
    # #
    # # novo_acorde = harmony.ChordSymbol('AmM7')
    # # [str(p) for p in novo_acorde.pitches]
    # #
    # # novo_acorde = harmony.ChordSymbol('A6')
    # # [str(p) for p in novo_acorde.pitches]
    # #
    # # novo_acorde = harmony.ChordSymbol('B/A')
    # # [str(p) for p in novo_acorde.pitches]
    # #
    # # novo_acorde = trocar_notacao_acordes(u'D7M')
    # #
    # # novo_acorde = trocar_notacao_acordes(u'D5(6)')
    # #
    # # novo_acorde = trocar_notacao_acordes(u'A°')
    # #
    # # novo_acorde = trocar_notacao_acordes(u'Aº')
    # #
    # # novo_acorde = trocar_notacao_acordes(u'D5(6/9)')
    # #
    # # novo_acorde = trocar_notacao_acordes(u'G#7(#5)')
    # #
    # # novo_acorde = trocar_notacao_acordes(u'Em7(9)')
    # #
    # # novo_acorde = trocar_notacao_acordes(u'B5b')
    # #
    # # novo_acorde = trocar_notacao_acordes(u'B5b/6/9')
    # #
    # # novo_acorde = trocar_notacao_acordes(u'G#m7(b13)')
    # #
    # # # novo_acorde = trocar_notacao_acordes(u'D4/F#')
    # # # notas = chords.from_shorthand(novo_acorde)
    # # # assert len(notas) > 0
    # #
    # # novo_acorde = trocar_notacao_acordes(u'Gsus4')
    # #
    # # novo_acorde = trocar_notacao_acordes(u'C#m5+/7')


    notas = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']
    idx_inicio_capo = [7, 0, 5, 10, 2, 7]

    acordes_cache = {}

    def acorde_music_21(desenho_acorde):
        acorde = acordes_cache.get(desenho_acorde)

        if acorde != None:
            return acorde

        lista_notas = []
        acorde_violao = u'X 0 1 0 1 X'.split()
        for i in range(0, 6):
            nota_str = acorde_violao[i]
            if nota_str != "X":
                nota = int(nota_str)
                inicio_capo = idx_inicio_capo[i]
                nota_traduzida = notas[(inicio_capo + nota) % 12]
                lista_notas.append(nota_traduzida)

        from music21 import chord

        acorde = chord.Chord(lista_notas)
        acordes_cache[desenho_acorde] = acorde
        return acorde

    import urllib
    import urllib2
    import json


    url = 'http://www.cifraclub.com.br/ajax/dicionario.php'
    form_data = {'acorde': "Am(11+)", "capo": 0}
    params = urllib.urlencode(form_data)
    response = urllib2.urlopen(url, params)
    json_data = response.read()
    data = json.loads(json_data)

    c = chord.Chord(['A#', 'B'])

    print data




